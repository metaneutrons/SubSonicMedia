name: Build and Publish NuGet Package

on:
  push:
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0.0, v20.15.10
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish package to NuGet.org'
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Extract version from tag
      id: get_version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=$(grep -m 1 '<VersionPrefix>' SubSonicMedia/Directory.Build.props | sed -E 's/.*<VersionPrefix>(.*)<\/VersionPrefix>.*/\1/')" >> $GITHUB_OUTPUT
        fi
      
    - name: Update version in Directory.Build.props
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        sed -i "s|<VersionPrefix>.*</VersionPrefix>|<VersionPrefix>${{ steps.get_version.outputs.VERSION }}</VersionPrefix>|g" SubSonicMedia/Directory.Build.props
        # If this is the first release, also remove alpha suffix
        if grep -q '<VersionSuffix>alpha</VersionSuffix>' SubSonicMedia/Directory.Build.props; then
          sed -i "s|<VersionSuffix>alpha</VersionSuffix>|<VersionSuffix></VersionSuffix>|g" SubSonicMedia/Directory.Build.props
        fi
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: StyleCop check
      run: dotnet build /p:TreatWarningsAsErrors=true --no-restore
      
    - name: Build Release
      run: dotnet build --configuration Release --no-restore
      
    - name: Format check
      run: dotnet csharpier . --check
      
    - name: Pack NuGet package
      run: dotnet pack --configuration Release --no-build -o ./artifacts
      
    # NuGet publishing steps
    - name: Push to NuGet.org
      if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true')
      run: |
        # Note: You'll need to add a NUGET_API_KEY secret in your GitHub repository settings
        if [ -z "$NUGET_API_KEY" ]; then
          echo "NuGet API key not found. Package was built but not published."
          exit 1
        else
          dotnet nuget push ./artifacts/*.nupkg --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json
          echo "Package published to NuGet.org successfully"
        fi
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        
    - name: Upload NuGet Package
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ./artifacts/*.nupkg
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: ./artifacts/*.nupkg
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
