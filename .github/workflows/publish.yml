name: Publish NuGet Package

on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0.0, v20.15.10
  workflow_dispatch:
    inputs:
      publish:
        description: "Publish package to NuGet.org"
        required: true
        default: false
        type: boolean

permissions:
  contents: write # Needed for creating GitHub releases

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for GitVersion
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '6.x'
          
      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true
          updateAssemblyInfo: true
          updateProjectFiles: true

      # If we're building from a tag, ensure version matches tag
      - name: Override version from tag
        id: version
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          TAG_VERSION=${GITHUB_REF_NAME#v}
          echo "Tag version: $TAG_VERSION"
          
          # Create GitVersion.props that matches the tag
          cat > GitVersion.props << EOF
          <Project>
            <PropertyGroup>
              <GitVersion_SemVer>$TAG_VERSION</GitVersion_SemVer>
              <GitVersion_MajorMinorPatch>${TAG_VERSION%%-*}</GitVersion_MajorMinorPatch>
              <GitVersion_NuGetVersion>$TAG_VERSION</GitVersion_NuGetVersion>
            </PropertyGroup>
          </Project>
          EOF
          
          echo "Using version from tag: $TAG_VERSION"
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Release
        run: dotnet build --configuration Release --no-restore

      - name: Pack NuGet package
        run: dotnet pack --configuration Release --no-build -o ./artifacts

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/*.nupkg
            ./artifacts/*.snupkg
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # NuGet publishing step
      - name: Push to NuGet.org
        if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true')
        run: |
          if [ -z "$NUGET_API_KEY" ]; then
            echo "NuGet API key not found. Package was built but not published."
            exit 1
          else
            dotnet nuget push "./artifacts/*.nupkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
            echo "Package published to NuGet.org successfully"
          fi
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: Upload NuGet Package
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: |
            ./artifacts/*.nupkg
            ./artifacts/*.snupkg